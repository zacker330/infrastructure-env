---

- name: uninstall apache2
  apt:
   name: apache2
   state: absent
  tags:
    - zabbix3

- name: Create zabbix user group
  become: yes
  group: name={{zabbix_group}} state=present
  tags:
    - zabbix3

- name: Create zabbix user
  become: yes
  user:
    name: "{{zabbix_user}}"
    group: "{{zabbix_group}}"
    system: true
  tags:
    - zabbix3

- name: Install zabbixrequired system packages.
  become: yes
  apt: pkg={{ item }} state=installed update_cache=true
  when: zabbixType == "server"
  with_items:
    - build-essential
    - gcc
    - curl
    - wget
    - libmysqld-dev # required by zabbix server with mysql
    - libsnmp-dev
    - libcurl4-gnutls-dev
    - libxml2-dev
    - unixodbc-dev
    - libssh-dev
    - libssh2-1-dev
    - fping
    - snmp
    - python-psycopg2
    - libpq-dev
    - snmp-mibs-downloader
  tags:
    - zabbix3

- name: Download zabbix
  get_url: url="http://liquidtelecom.dl.sourceforge.net/project/zabbix/ZABBIX%20Latest%20Stable/{{zabbix_version}}/zabbix-{{zabbix_version}}.tar.gz" dest="/home/{{ zabbix_user }}/zabbix-{{zabbix_version}}.tar.gz" mode=0440
  register: zabbix_download
  tags:
    - zabbix3

- name: create log dir
  file:
    path: "{{zabbix_log_dir}}"
    state: directory
    mode: 0775
    owner: "{{zabbix_user}}"
    group: "{{zabbix_group}}"
  tags:
    - zabbix3

- stat: path="{{zabbix_tar_exact_path}}.tar.gz"
  register: zabbix_tar_stat
  tags:
    - zabbix3


- stat: path="{{zabbix_tar_exact_path}}"
  register: zabbix_extract_stat
  tags:
    - zabbix3

- name:  Extract zabbix  tar
  when:  zabbix_tar_stat.stat.exists == True and zabbix_extract_stat.stat.exists == False
  unarchive: src="{{zabbix_tar_exact_path}}.tar.gz" dest=/home/{{ zabbix_user }}/ copy=no owner={{ zabbix_user }} group={{ zabbix_group }}
  tags:
    - zabbix3

- stat: path={{zabbix_tar_exact_path}}/Makefile
  register: makefile_stat
  tags:
    - zabbix3


- name: already make install
  stat: path="{{zabbix_home}}"
  register: zabbixAlreadyMakeInstall
  tags:
    - zabbix3

- name: Configure Make install
  register: config_makefile
  #when: makefile_stat.stat.exists == False
  shell: "./configure  --prefix={{zabbix_home}} --enable-server --enable-web --with-net-snmp --with-libcurl --with-libcurl2 --with-ssh2 --with-unixodbc --with-mysql"
  when: zabbixType == "server" and zabbixAlreadyMakeInstall.stat.exists == False
  args:
    chdir: "{{zabbix_tar_exact_path}}/"
  tags:
    - zabbix3

- name: Configure Make install
  register: config_makefile
  #when: makefile_stat.stat.exists == False
  shell: "./configure --enable-agent --prefix={{zabbix_home}}"
  when: zabbixType == "agent" and zabbixAlreadyMakeInstall.stat.exists == False
  args:
    chdir: "{{zabbix_tar_exact_path}}/"
  tags:
    - zabbix3


- name: Make install
  become: yes
  shell: make install
  args:
    chdir: "{{zabbix_tar_exact_path}}/"
  when: zabbixAlreadyMakeInstall.stat.exists == False
  tags:
    - zabbix3

- name: check if mysql db already exists
  shell: "mysql -u{{zabbix_mysql_username}} -p{{ zabbix_mysql_password }} -e 'SHOW DATABASES;' | grep {{ zabbix_mysql_dbname }}"
  ignore_errors: yes
  register: server_dbstatus
  tags:
    - zabbix3

- name: config zabbix
  template:
    src: zabbix_server.conf
    dest: "{{zabbix_home}}/etc/"
    owner: "{{zabbix_user}}"
    group: "{{zabbix_group}}"
    mode: "ug=rw,o=r"
  when: zabbixType == "server"
  tags:
    - zabbix3

- name: set owner zabbix folder
  file:
    recurse: yes
    path: "{{zabbix_home}}"
    owner: "{{zabbix_user}}"
    group: "{{zabbix_group}}"
  when: zabbixType == "server"
  tags:
    - zabbix3

- name: create mysql database
  mysql_db: name={{ zabbix_mysql_dbname }} state=present
  when: server_dbstatus.rc != 0 and zabbixType == "server"
  tags:
    - zabbix3


- name: create mysql user
  mysql_user: name={{ zabbix_mysql_username }} password={{ zabbix_mysql_password }} priv={{ zabbix_mysql_dbname }}.*:ALL state=present
  when: zabbixType == "server"
  no_log: true
  tags:
    - zabbix3

- name: import mysql schema table
  mysql_db: name={{ zabbix_mysql_dbname }} state=import target={{zabbix_tar_exact_path}}/database/mysql/schema.sql
  when: server_dbstatus.rc != 0 and zabbixType == "server"
  no_log: true
  tags:
    - zabbix3

- name: import mysql images table
  mysql_db: name={{ zabbix_mysql_dbname }} state=import target={{zabbix_tar_exact_path}}/database/mysql/images.sql
  when: server_dbstatus.rc != 0 and zabbixType == "server"
  # no_log: true
  tags:
    - zabbix3

- name: import mysql data table
  mysql_db: name={{ zabbix_mysql_dbname }} state=import target={{zabbix_tar_exact_path}}/database/mysql/data.sql
  when: server_dbstatus.rc != 0 and zabbixType == "server"
  no_log: true
  tags:
    - zabbix3

- name: "copy {{zabbix_admin_update_sql_path}}"
  template:
    src: "zabbix_admin_update.sql"
    dest: "{{zabbix_admin_update_sql_path}}"
    owner: "{{zabbix_user}}"
    group: "{{zabbix_group}}"
    mode: 0660
  no_log: true
  tags:
    - zabbix3

- name: update zabbix admin password
  become: yes
  mysql_db: name={{ zabbix_mysql_dbname }} state=import target={{zabbix_admin_update_sql_path}}
  when: server_dbstatus.rc != 0 and zabbixType == "server"
  no_log: true
  tags:
    - zabbix3


- name: "delete {{zabbix_admin_update_sql_path}}"
  file:
    path: "{{zabbix_admin_update_sql_path}}"
    state: absent
  no_log: true
  tags:
    - zabbix3


- name: copy zabbix php
  shell: "cp -r {{zabbix_tar_exact_path}}/frontends/php/ {{zabbix_frontends_path}}"
  when: server_dbstatus.rc != 0 and zabbixType == "server"
  become: yes
  tags:
    - zabbix3

- name: zabbix.conf.php
  template:
    dest: "{{zabbix_home}}/frontends/conf/"
    src: zabbix.conf.php
    owner: "{{zabbix_user}}"
    group: "{{zabbix_group}}"
    mode: "ug=rw,o=r"
  when: zabbixType == "server"
  become: yes
  tags:
    - zabbix3

- name: set owner
  file:
    path: "{{zabbix_frontends_path}}"
    recurse: true
    owner: "{{zabbix_user}}"
    group: "{{zabbix_group}}"
    mode: "ug=rwx,o=rwx"
  when: zabbixType == "server"
  tags:
    - zabbix3

- name: copy zabbixserver service
  template:
    src: zabbixserver.service
    dest: /etc/systemd/system/
    owner: "{{zabbix_user}}"
    group: "{{zabbix_group}}"
    mode: "ug=rwx,o=r"
  when: zabbixType == "server"
  tags:
    - zabbix3

- name: copy zabbixagentd service
  template:
    src: zabbixagentd.service
    dest: /etc/systemd/system/
    owner: "{{zabbix_user}}"
    group: "{{zabbix_group}}"
    mode: "ug=rwx,o=r"
    force: true
  when: zabbixType == "agent"
  tags:
    - zabbix3


- name: reload systemd
  command: "systemctl daemon-reload"
  become: true
  tags:
    - zabbix3

- name: restart zabbix server
  service: name=zabbixserver state=reloaded
  when: zabbixType == "server"
  tags:
    - zabbix3


- name: restart zabbix agent
  service: name=zabbixagentd state=started
  when: zabbixType == "agent"
  tags:
    - zabbix3
